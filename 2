Title: UNIX
summary: unix tools
- - - 
# bash
[v.good guide to bash](https://www.tldp.org/LDP/abs/html/)
[process management](https://mywiki.wooledge.org/ProcessManagement)
Important point! Syntax for running stuff from the command line is v. different to running in script

#### **define a functin on the command line**

```bash
test_func () {<do something> $1}
```

a useful example 

```bash
site_collector_copy () {aws s3 cp s3://tvsquared-userdata/collector/$1/2019.08/ s3://tvsquared-userdata-preprod/collector/$1/2019.08/ --recursive}
```


#### **basics**

```bash
Myvariable=Hello
Anothervar=Fred
echo $myvariable 
sample/etc
ls $sample
```

#### **basic data types**

```bash
names=("chris" "dan" "alex")
```

#### **ways to increment variables**
[increment variables](https://askubuntu.com/questions/385528/how-to-increment-a-variable-in-bash)
```bash
var=$((var+1))
((var=var+1))
((var+=1))
((var++))
```

#### **basic if else statements**

```bash
for tag in $(git tag); do
    if [[ $tag == *'tvs'* ]]; then
        echo $tag
 §   elif [[ <do something else> ]]; then
        echo do something else""
    else
        echo "Unknown parameter"
    fi
done
```

#### **check for specific file extensions**

```bash
elif [[ $file =~ \.bz2$ ]]
```

#### **check if file exists**
[check file exists](https://linuxize.com/post/bash-check-if-file-exists/)

#### **loops**

xarsg and parallel are alternatives to looping

basic loop
```bash
names=("chris" "dan" "alex")
for name in $names;do 
    echo $name
done
```

basic while loop
```bash
counter=1
while [[ $counter -le 10 ]]; do 
    echo $counter
    ((counter++))
done
```

basic until loop
```bash
counter=1 
until [[ $counter -gt 10 ]]; do 
    echo $counter 
    ((counter++))
done
```


loop through all files in a folder
```bash
for file in ./*.log; do 
    echo $file; <do something>; 
done
```

copy all files in a file list

```bash
for file in $(cat filestocopy.txt); 
do cp ${file} ~/dev/tvsquared-backend/data/testdata/assist/; 
done
```




# awk
https://www.tutorialspoint.com/awk/awk_basic_examples.htm

#### **cut sections from strings**
similar to cut at a basic level, but much more powerful and esoteric.
```bash
ls -l | awk '{print $5}'
```
would get all the files for the contents of the current folder

# bc
use bc for maths
```bash
echo "2+2" | bc
```



# chmod
change permissions of files or folders

| # | permission | rwx |
|---|---|---|
|7| read, write, exec | rwx|
|6|read, write|rw|
|5|read, exec|r-x|
|4|read|r--|
|3|write, exec|-wx|
|2|write|-w-|
|1|exec|--x|
|0|none|---| 

# cut

#### **get specific column from csv**

```bash
head <filename.csv> | cut -f 5 -d ,
```
will get the contents of the 5th column split on , 

# cron
https://opensource.com/article/17/11/how-use-cron-linux
#### **edit the crontab**
```bash
vim crontab -e
```

*****
min, hour, day of month, month, day_of_week

#### **add a new crontab**
```bash
crontab ~/.crontab.crontab
```

# curl

# date
tool for converting times etc

#### **convert timestamps**
```bash
date -r 1555718402
```
can provide timezone info
```bash
TZ=UTC date -r 1559780588
```
not 100 % trustworthy

#### **get current date in nice format**
```bash
date -v -1d +"%Y-%m-%d"
```
would return yesterday in nice format
```bash
date1=$(date +%Y-%m-%d)
```
would assign todays date in the format 2019-07-27 to date1



# find

#### **find all existing repos** 
You can use the following to git init all your existing tvsquared local git repos:
```bash
find . -type d -name tvsquared-\* -exec git init \{\} \;
```


# grep

# head/tail

#### **get subset of data from csv**
```bash
tail -10000 <filename.csv> | head
```


#### **strip header from csv** 

```bash
tail -n +2 <filename>.csv | head
```


# htop
https://peteris.rocks/blog/htop/
monitors system performance
```bash
htop
```

# kill
kill a job or process. Get the pid from htop or ps aux

```bash
kill -9 <PID>
```

# less
makes streamed output managable

```bash
 ps -ef | less
```
would give you all the processes running, one page at a time
# ls

#### **list all files of certain type in folder**
```bash
ls *.csv
```

# pbcopy / pbpaste

copies to and from the clipboard

# mail

email yourself from the cmdline
```bash
data | mail –s test <email address>
```

# sed
very powerful and fast test streaming and processing. v.esoteric
https://stackoverflow.com/questions/2112469/delete-specific-line-numbers-from-a-text-file-using-sed

useful flags
-i: edit in place, will over right current
-e:
-n: inverse, get everything that doesn't match.
-g: global, all instances of match in whole file.

#### **find and replace**
```bash
sed 's/<thing to find>/<thing to replace with>/g' <filelocation>.csv > <filedestination>.txt
```
example
```bash
sed 's/"/""/g' extra.holidays.2018.csv> whatnewcsv.txt
```

#### **find and delete**
https://stackoverflow.com/questions/5410757/delete-lines-in-a-text-file-that-contain-a-specific-string

```bash
sed  -i ‘/patterntomatch/d’ <filename.csv>
```
or 
```bash
sed  ‘/patterntomatch/d’ <filename.csv> <newfile>
```

#### **delete specific rows from file**
single line
```bash
sed -e ‘1000d’ <filename from> <filename to>
```
range of lines
```bash
sed -e ‘1000,10003d;56788d’ <filename from> <filename to>
```

#### **display specific rows**
told you it was esoteric!
```bash
sed -n '6643913,6643920p;6643921q' split_data.csv > dodgy.txt
```

# scp

#### **glomming / globbing scp**

```bash
scp 'backend@backend.preprod.tvsquared.private:/tmp/4008-1*' .
```


#### **transfer from local to remote**

```bash
scp /<filepath>/<filename> backend@backend.preprev.tvsquared.private:~/backend
```

#### **transfer from remote to local**

exammple
```bash
scp backend@backend.preprev.tvsquared.private:~/backend/tvsquared/tools/bespoke/alphonsoexpediadataimporter.py /Users/work/Desktop
```

# sftp

https://www.tecmint.com/sftp-command-examples/
#### **login to server**

```bash
sftp <serveraddress>
```

example
```bash
sftp groupon_test_1@upload-3840.tvsquared.com
```

# split

splits file into smaller chunks.

# ssh

#### **generate ssh key**
might want to check this
```bash
 echo '$(cat ~/.ssh/id_rsa.pub)'
```


#### **exit a session**
```bash
exit
```
# tee
splits output to both stdout and to file. Get to see what you are getting and output to file.

# tmux

# tr
used to trim data quickly

#### **remove characters from a csv v.quickly**
could also use sed here
This would remove all " from a file and write to a new file.
```bash
cat <filename>.csv | tr -d \" > new_filename.csv
```

# tree 
display file structure
```bash
tree -L 4
```
will display file structure down to level 4

# xargs

#### **loop through a list of files on s3 and grep them in parallel** 
```bash
xargs -I % -P 5
```

# wc

#### **number of files in folder**
```bash
ls -l | wc -l
```
